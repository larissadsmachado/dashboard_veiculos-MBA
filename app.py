#app.py

import pandas as pd
import streamlit as st
import plotly.express as px

# Configura√ß√£o inicial
st.set_page_config(page_title="Valoriza√ß√£o de Ve√≠culos no Brasil", page_icon="üöò", layout="wide")
st.title("üöò An√°lise da valoriza√ß√£o de ve√≠culos novos e usados (2020‚Äì2024)")

# Fun√ß√£o para carregar dados
@st.cache_data
def load_data():
    df = pd.read_csv("tabela-fipe-historico-precos.csv", sep=",")
    df = df[['marca', 'modelo', 'anoModelo', 'mesReferencia', 'anoReferencia', 'valor']]
    df['data'] = pd.to_datetime(df['anoReferencia'].astype(str) + '-' + df['mesReferencia'].astype(str) + '-01')
    df = df[df['valor'] > 0]
    return df

df = load_data()

# SIDEBAR ‚Äì filtros
st.sidebar.header("üîé Filtros")
marcas_disponiveis = sorted(df['marca'].unique())
anos_disponiveis = sorted(df['anoModelo'].unique())

marcas_default = [m for m in ["Toyota", "Volkswagen", "Honda"] if m in marcas_disponiveis]
anos_default = [a for a in [2020, 2021, 2022, 2023, 2024] if a in anos_disponiveis]

marcas = st.sidebar.multiselect("Marcas", marcas_disponiveis, default=marcas_default)
anos = st.sidebar.multiselect("Ano do modelo", anos_disponiveis, default=anos_default)

df_filtrado = df[df['marca'].isin(marcas) & df['anoModelo'].isin(anos)]

# KPIs
st.subheader("üìä Indicadores principais")
col1, col2, col3 = st.columns(3)
col1.metric("Modelos avaliados", df_filtrado['modelo'].nunique())
col2.metric("Pre√ßo m√©dio (R$)", f"{df_filtrado['valor'].mean():,.2f}")
col3.metric("Per√≠odo", f"{df_filtrado['data'].min().year}‚Äì{df_filtrado['data'].max().year}")

# EVOLU√á√ÉO DE PRE√áOS
st.markdown("### üìà Evolu√ß√£o do pre√ßo m√©dio por modelo")
modelo = st.selectbox("Selecione o modelo", sorted(df_filtrado['modelo'].unique()))
df_modelo = df_filtrado[df_filtrado['modelo'] == modelo].sort_values('data')

fig1 = px.line(df_modelo, x='data', y='valor', color='marca',
               markers=True, title=f"Evolu√ß√£o de pre√ßo do {modelo}")
st.plotly_chart(fig1, use_container_width=True)
st.caption("‚û°Ô∏è Mostra a flutua√ß√£o de pre√ßos ao longo do tempo, √∫til para identificar valoriza√ß√£o ou quedas sazonais.")

# TOP 10 VALORIZADOS
st.markdown("### üèÜ Top 10 modelos mais valorizados")
df_valoriz = df_filtrado.groupby('modelo').agg(
    valor_inicial=('valor', 'first'),
    valor_final=('valor', 'last')
).reset_index()
df_valoriz['% valoriza√ß√£o'] = ((df_valoriz['valor_final'] - df_valoriz['valor_inicial']) / df_valoriz['valor_inicial']) * 100
df_top = df_valoriz.sort_values('% valoriza√ß√£o', ascending=False).head(10)

fig2 = px.bar(df_top, x='modelo', y='% valoriza√ß√£o', color='% valoriza√ß√£o', text='% valoriza√ß√£o',
              title="Top 10 modelos que mais valorizaram (%)")
st.plotly_chart(fig2, use_container_width=True)
st.caption("‚û°Ô∏è Ajuda a entender quais modelos mant√™m valor ‚Äî bom para investimento ou revenda.")

# NOVO x USADO
st.markdown("### ‚öñÔ∏è Comparativo entre ve√≠culos novos e usados")
df_filtrado['tipo'] = df_filtrado['anoModelo'].apply(lambda x: 'Novo' if x >= 2024 else 'Usado')
df_tipo = df_filtrado.groupby('tipo')['valor'].mean().reset_index()

fig3 = px.bar(df_tipo, x='tipo', y='valor', color='tipo', title="Pre√ßo m√©dio: novos vs usados")
st.plotly_chart(fig3, use_container_width=True)
st.caption("‚û°Ô∏è Mostra o quanto o mercado de usados vem se aproximando dos novos em valor m√©dio.")

# INSIGHT FINAL
st.info("""
üí° **Conclus√£o:**  
Entre 2020 e 2024, houve valoriza√ß√£o at√≠pica em modelos populares usados, 
reflexo da escassez de semicondutores e aumento de demanda p√≥s-pandemia.  
Esse padr√£o sugere que o mercado de usados ganhou for√ßa e estabilidade no per√≠odo analisado.
""")
